import numpy as np

def director_deportivo(valoraciones:list,fichas:list, G:int):

    if len(valoraciones) == 0 or G == 0:
        return 0

    if G < fichas[-1]:

        no_cogerlo = director_deportivo(valoraciones[:-1], fichas[:-1], G)
        return no_cogerlo

    else:

        cogerlo = director_deportivo(valoraciones[:-1], fichas[:-1], G-fichas[-1]) + valoraciones[-1]

        no_cogerlo = director_deportivo(valoraciones[:-1], fichas[:-1], G)
        return max(cogerlo, no_cogerlo)


# Sample valoraciones (player ratings/values)
valoraciones = [6, 1, 3, 8]

# Corresponding fichas (player costs in millions)
fichas = [950, 2400, 500, 2000]

# Budget example
G = 3000



import numpy as np

def pd_iterativa(C, dias, R, DP):
    n = len(dias)
    
    for i in range(1, n+1):
        for j in range(1, C+1):
            if i-R < 0:
                DP[i][j] = DP[i-1][j]
            else:
                DP[i][j] = max(DP[i-R][j-1] + dias[i-1], DP[i-1][j])
    return DP[n][C]

def pd_recursiva(C, dias, R, PD):

    def pd_recursiva_aux(C, R, dias, idx, PD):
        if PD[idx][C] != -1:
            return PD[idx][C]
        
        if C == 0 or idx <= 0:
            return 0
        else:
        
            PD[idx][C] = max(pd_recursiva_aux(C-1, R, dias, idx-R, PD) + dias[idx-1], pd_recursiva_aux(C, R, dias, idx-1, PD))
        return PD[idx][C]
    return pd_recursiva_aux(C, R, dias, len(dias), PD)



def recursiva(C, dias, R):
    def recursiva_aux(C, R, dias, idx):

        if C == 0 or idx <= 0:
            return 0
        
        return max(recursiva_aux(C-1, R, dias, idx-R) + dias[idx-1], recursiva_aux(C, R, dias, idx-1))
    
    return recursiva_aux(C, R, dias, len(dias))

def pd_completa(C, dias, R, PD):
    i = PD.shape[0] - 1
    j = PD.shape[1] - 1

    soluciones = []

    while i > 0 and j > 0:
        if PD[i][j] == PD[i-1][j]:
            i -= 1
        else:
            soluciones.append(i-1)
            i -= R
            j -= 1
    return sorted(soluciones)
    
if __name__ == '__main__':

    estructura = [([1, 2, 4, 7, 3], 2, 3, "Expected: 9,  [1, 3]"),
                  ([300, 200, 100, 150, 250, 350], 2, 2, "Expected: 650,   [0, 5]"),
                  ([2, 4, 3, 5, 2], 3, 3, "Expected: 7,  [0, 3]"),
                  ([1, 7, 5, 6, 8, 4, 9], 4, 3, "Expected: 16,  [1, 6]")]

    print("### Pruebas parcial 2 ###\n")
    for idx in range(4):
        print(f"Prueba {idx+1}")
        dias, descanso, maximo, texto = estructura[idx]

        # recursiva
        print(f"\tSoluci贸n recursiva: {recursiva(maximo, dias, descanso)}")

        # memo
        PD = np.full( (len(dias)+1, maximo+1), -1)

        print(f"\tSoluci贸n PD recursiva: {pd_recursiva(maximo, dias, descanso, PD)}")

        # iterativa
        PD = np.full( (len(dias)+1, maximo+1), 0)
        print(f"\tSoluci贸n PD iterativa: {pd_iterativa(maximo, dias, descanso, PD)}")

        print(f"\tSoluci贸n PD completa: {pd_completa(maximo, dias, descanso, PD)}")

        print(texto)
        print("==========================")