#include <stdio.h>
#include <omp.h>

#define PASOS 100 // Se define el n√∫mero total de pasos en la preparaci√≥n

int main() {
int plato = 0; // Variable compartida que acumula el total de ingredientes
printf("üçΩÔ∏è Cocineros colaborando para preparar un plato en %d pasos...\n", PASOS);
// Inicio de la regi√≥n paralela: aqu√≠ se crean m√∫ltiples hilos para simular a los cocineros
#pragma omp parallel
{
    int id = omp_get_thread_num();  // Cada hilo obtiene su identificador

    // Distribuci√≥n de iteraciones del bucle entre hilos para trabajar en paralelo
    #pragma omp for
    for (int i = 0; i < PASOS; i++) {

        // Si el paso actual es 50, se ejecuta la secci√≥n especial controlada por el Gran Chef
        if (i == 50) {
            #pragma omp critical  // Secci√≥n cr√≠tica: solo un hilo puede ejecutar este bloque a la vez
            {
                printf("üë®‚Äçüç≥ Gran Chef %d est√° preparando una secci√≥n especial...\n", id);
                for (int j = 1; j <= 5; j++) {
                    plato += 1;  // Se a√±aden 5 ingredientes especiales de forma secuencial
                    printf("üë®‚Äçüç≥ Gran Chef %d a√±adi√≥ ingrediente especial %d. Total: %d\n", id, j, plato);
                }
            }
        } else {
            // En los dem√°s pasos, se simula la preparaci√≥n del ingrediente en 3 subpasos
            int preparado = 0;
            for (int k = 0; k < 3; k++) {
                preparado += 1;  // Simula el proceso interno de preparaci√≥n
            }
            // Se actualiza la variable compartida 'plato' de forma at√≥mica para evitar condiciones de carrera
            #pragma omp atomic
            plato += preparado;
            printf("üë®‚Äçüç≥ Cocinero %d a√±adi√≥ ingrediente preparado (%d pasos). Total: %d\n", id, preparado, plato);
        }
    } // Fin del for de iteraciones

    // [Opcional] Barrera para sincronizar a todos los hilos: garantiza que todos completen sus tareas antes de terminar la regi√≥n paralela
    // #pragma omp barrier
} // Fin de la regi√≥n paralela

// Al terminar la regi√≥n paralela, se muestra el total de ingredientes a√±adidos al plato
printf("üç≤ Plato terminado con %d ingredientes.\n", plato);
return 0;
}
