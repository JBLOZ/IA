
Tutorial 1 - Bank decision loan problem with crisp inputs

In this tutorial a fuzzy inference system for loan approbation is builded. The problem has three input variables: score, ratio, and credit; and one output variable: decision.

[1]:
import os

os.chdir('/workspaces/fuzzy-expert')
[2]:
import warnings

warnings.filterwarnings("ignore")
Variable specification

In the following code, a dictionary containing the variables of the problem is defined. The keys of the dictionary are the names of the variables in the rules. For each variable is defined the limits of the universe of discourse, the terms, and the membership function for each term. Finally, the variable score is ploted.

[3]:
import matplotlib.pyplot as plt
import numpy as np

from fuzzy_expert.variable import FuzzyVariable

variables = {
    "score": FuzzyVariable(
        universe_range=(150, 200),
        terms={
            "High": [(175, 0), (180, 0.2), (185, 0.7), (190, 1)],
            "Low": [(155, 1), (160, 0.8), (165, 0.5), (170, 0.2), (175, 0)],
        },
    ),
    "ratio": FuzzyVariable(
        universe_range=(0.1, 1),
        terms={
            "Goodr": [(0.3, 1), (0.4, 0.7), (0.41, 0.3), (0.42, 0)],
            "Badr": [(0.44, 0), (0.45, 0.3), (0.5, 0.7), (0.7, 1)],
        },
    ),
    #
    "credit": FuzzyVariable(
        universe_range=(0, 10),
        terms={
            "Goodc": [(2, 1), (3, 0.7), (4, 0.3), (5, 0)],
            "Badc": [(5, 0), (6, 0.3), (7, 0.7), (8, 1)],
        },
    ),
    #
    "decision": FuzzyVariable(
        universe_range=(0, 10),
        terms={
            "Approve": [(5, 0), (6, 0.3), (7, 0.7), (8, 1)],
            "Reject": [(2, 1), (3, 0.7), (4, 0.3), (5, 0)],
        },
    ),
}

plt.figure(figsize=(10, 2.5))
variables["score"].plot()
../_images/tutorials_tutorial-1_5_0.svg
Rule specification

The fuzzy inference system has two rules. They are directly stored in a list.

[4]:
from fuzzy_expert.rule import FuzzyRule

rules = [
    FuzzyRule(
        premise=[
            ("score", "High"),
            ("AND", "ratio", "Goodr"),
            ("AND", "credit", "Goodc"),
        ],
        consequence=[("decision", "Approve")],
    ),
    FuzzyRule(
        premise=[
            ("score", "Low"),
            ("AND", "ratio", "Badr"),
            ("OR", "credit", "Badc"),
        ],
        consequence=[("decision", "Reject")],
    )
]

print(rules[0])
print()
print(rules[1])
IF  score IS High
    AND ratio IS Goodr
    AND credit IS Goodc
THEN
    decision IS Approve
CF = 1.00
Threshold-CF = 0.00


IF  score IS Low
    AND ratio IS Badr
    OR credit IS Badc
THEN
    decision IS Reject
CF = 1.00
Threshold-CF = 0.00

Inference system specification and computations

Finally, the fuzzy inference system is specified. The model is used to evaluate the following crisp values for the input variables: score=190, ratio=0.39, and credit=1.5. The model returns a dictionary with the values of the variables in the consequence of the rules and the certainty factor of the conclusion.

[5]:
from fuzzy_expert.inference import DecompositionalInference

model = DecompositionalInference(
    and_operator="min",
    or_operator="max",
    implication_operator="Rc",
    composition_operator="max-min",
    production_link="max",
    defuzzification_operator="cog",
)

model(
    variables=variables,
    rules=rules,
    score=190,
    ratio=0.39,
    credit=1.5,
)
[5]:
({'decision': 8.010492631084489}, 1.0)
Visualization of the results

The function plot can be used to obtain a graphical represntation of the results of the inference systems. It uses the same parameters used to the evaluation of the system.

[6]:
plt.figure(figsize=(10, 6))
model.plot(
    variables=variables,
    rules=rules,
    score=190,
    ratio=0.39,
    credit=1.5,
)
../_images/tutorials_tutorial-1_12_0.svg
User interaction

Using the ipywidgets package in Jupyter Lab it is possible to obtain an interactive user interface for the user. The funtion demo is used to plot the results; following, the function interact is used to create the user interface.

[7]:
from ipywidgets import interact, widgets

def demo(score, ratio, credit):
    plt.figure(figsize=(10,6))
    model.plot(
        variables=variables,
        rules=rules,
        score=score,
        ratio=ratio,
        credit=credit,
    )

interact(
    demo,
    score=widgets.FloatSlider(min=150, max=200),
    ratio=widgets.FloatSlider(min=0.1, max=1),
    credit=widgets.FloatSlider(min=0, max=10),
)
[7]:
<function __main__.demo(score, ratio, credit)>
inter


Tutorial 2 - Bank decision loan problem with fuzzy inputs

This tutorial uses the fuzzy inference system developed in Tutorial 1.

[1]:
import os
import warnings

os.chdir('/workspaces/fuzzy-expert')
warnings.filterwarnings("ignore")

Specification of the fuzzy inference system

[2]:
import matplotlib.pyplot as plt
import numpy as np

from fuzzy_expert.variable import FuzzyVariable
from fuzzy_expert.rule import FuzzyRule
from fuzzy_expert.inference import DecompositionalInference

variables = {
    "score": FuzzyVariable(
        universe_range=(150, 200),
        terms={
            "High": [(175, 0), (180, 0.2), (185, 0.7), (190, 1)],
            "Low": [(155, 1), (160, 0.8), (165, 0.5), (170, 0.2), (175, 0)],
        },
    ),
    "ratio": FuzzyVariable(
        universe_range=(0.1, 1),
        terms={
            "Goodr": [(0.3, 1), (0.4, 0.7), (0.41, 0.3), (0.42, 0)],
            "Badr": [(0.44, 0), (0.45, 0.3), (0.5, 0.7), (0.7, 1)],
        },
    ),
    #
    "credit": FuzzyVariable(
        universe_range=(0, 10),
        terms={
            "Goodc": [(2, 1), (3, 0.7), (4, 0.3), (5, 0)],
            "Badc": [(5, 0), (6, 0.3), (7, 0.7), (8, 1)],
        },
    ),
    #
    "decision": FuzzyVariable(
        universe_range=(0, 10),
        terms={
            "Approve": [(5, 0), (6, 0.3), (7, 0.7), (8, 1)],
            "Reject": [(2, 1), (3, 0.7), (4, 0.3), (5, 0)],
        },
    ),
}

rules = [
    FuzzyRule(
        premise=[
            ("score", "High"),
            ("AND", "ratio", "Goodr"),
            ("AND", "credit", "Goodc"),
        ],
        consequence=[("decision", "Approve")],
    ),
    FuzzyRule(
        premise=[
            ("score", "Low"),
            ("AND", "ratio", "Badr"),
            ("OR", "credit", "Badc"),
        ],
        consequence=[("decision", "Reject")],
    )
]

model = DecompositionalInference(
    and_operator="min",
    or_operator="max",
    implication_operator="Rc",
    composition_operator="max-min",
    production_link="max",
    defuzzification_operator="cog",
)


Computation with fuzzy inputs

Fuzzy inputs are specified as a list of points (x, u), where x is a point in the universe of discourse and u is the corresponding value of the membership function. In the first case, the fuzziness of inputs are considered; however, values are according with an approval decision.

[3]:
plt.figure(figsize=(10,6))

model.plot(
    variables=variables,
    rules=rules,
    score=[(180, 0.0), (190, 0.2), (195, 0.8), (200, 1.0)],
    ratio=[(0.1, 1), (0.3, 1), (0.4, 0.6), (0.41, 0.2),  (0.42, 0)],
    credit=[(0, 0), (1, 1), (2, 1), (3, 0.0), (4, 0.0)],
)
../_images/tutorials_tutorial-2_7_0.svg
In the second case, the values are clearly related to a reject decision.

[10]:
plt.figure(figsize=(10,6))

model.plot(
    variables=variables,
    rules=rules,
    score=[(150, 0.9), (155, 0.7), (160, 0.5), (165, 0.3), (170, 0.0)],
    ratio=[(0.44, 0), (0.45, 0.3), (0.5, 0.5), (0.7, 0.7),  (1, 0.9)],
    credit=[(6, 0), (7, 0.3), (8, 0.5), (9, 0.7), (10, 0.9)],
)
../_images/tutorials_tutorial-2_9_0.svg
In the third case, two variables have good values and the third a bad value, causing indetermination in the result.

[13]:
plt.figure(figsize=(10,6))

model.plot(
    variables=variables,
    rules=rules,
    score=[(185, 0.0), (190, 0.4), (195, 0.6), (200, 0.8)],
    ratio=[(0.45, 0), (0.5, 0.4), (0.7, 0.6), (1, 0.8)],
    credit=[(2, 1), (3, 0.8), (4, 0.6), (4.8, 0.0)],
)
../_images/tutorials_tutorial-2_11_0.svg


Tutorial 3 - Standard membership functions

This tutorial uses the fuzzy inference system developed in Tutorial 1.

[1]:
import os
import warnings

os.chdir('/workspaces/fuzzy-expert')
warnings.filterwarnings("ignore")

Specification of the fuzzy variables with standard membership functions

In the following code, fuzzy sets are specified using standard membership functions, which are described in the function reference section.

Fuzzy sets in variables score and ratio are specified using the smf and zmf functions. Fuzzy sets for variables credit and decision are specified using the trapmf function.

[2]:
import matplotlib.pyplot as plt
import numpy as np

from fuzzy_expert.variable import FuzzyVariable

variables = {
    "score": FuzzyVariable(
        universe_range=(150, 200),
        terms={
            "High": ('smf', 175, 190),
            "Low": ('zmf', 155, 175),
        },
    ),
    "ratio": FuzzyVariable(
        universe_range=(0.1, 1),
        terms={
            "Goodr": ('zmf', 0.3, 0.42),
            "Badr": ('smf', 0.44, 0.7),
        },
    ),
    #
    "credit": FuzzyVariable(
        universe_range=(0, 10),
        terms={
            "Goodc": ('trapmf', 0, 0, 2, 5),
            "Badc":  ('trapmf', 5, 8, 10, 10),
        },
    ),
    #
    "decision": FuzzyVariable(
        universe_range=(0, 10),
        terms={
            "Approve": ('trapmf', 5, 8, 10, 10),
            "Reject": ('trapmf', 0, 0, 2, 5),
        },
    ),
}
[3]:
variables['score'].plot()
../_images/tutorials_tutorial-3_6_0.svg
[4]:
variables['ratio'].plot()
../_images/tutorials_tutorial-3_7_0.svg
[5]:
variables['credit'].plot()
../_images/tutorials_tutorial-3_8_0.svg
[6]:
variables['decision'].plot()



Tutorial 4 - Certainty factors

This tutorial uses the fuzzy inference system developed in Tutorial 1.

[5]:
import os
import warnings

os.chdir('/workspaces/fuzzy-expert')
warnings.filterwarnings("ignore")
Fuzzy Variables

[6]:
import matplotlib.pyplot as plt
import numpy as np

from fuzzy_expert.variable import FuzzyVariable
from fuzzy_expert.rule import FuzzyRule
from fuzzy_expert.inference import DecompositionalInference

variables = {
    "score": FuzzyVariable(
        universe_range=(150, 200),
        terms={
            "High": [(175, 0), (180, 0.2), (185, 0.7), (190, 1)],
            "Low": [(155, 1), (160, 0.8), (165, 0.5), (170, 0.2), (175, 0)],
        },
    ),
    "ratio": FuzzyVariable(
        universe_range=(0.1, 1),
        terms={
            "Goodr": [(0.3, 1), (0.4, 0.7), (0.41, 0.3), (0.42, 0)],
            "Badr": [(0.44, 0), (0.45, 0.3), (0.5, 0.7), (0.7, 1)],
        },
    ),
    #
    "credit": FuzzyVariable(
        universe_range=(0, 10),
        terms={
            "Goodc": [(2, 1), (3, 0.7), (4, 0.3), (5, 0)],
            "Badc": [(5, 0), (6, 0.3), (7, 0.7), (8, 1)],
        },
    ),
    #
    "decision": FuzzyVariable(
        universe_range=(0, 10),
        terms={
            "Approve": [(5, 0), (6, 0.3), (7, 0.7), (8, 1)],
            "Reject": [(2, 1), (3, 0.7), (4, 0.3), (5, 0)],
        },
    ),
}
Fuzzy rules with certainty factors

It is possible to assign a certainty factor (cf) to each rule. If this value is not specified, it has assumed to be equal to 1.0. In addition, the threshold_cf is the minimum certainty factor required to consider the rule fired; this is, rules with a computed certainty factor below the threshold are not considering for computing the output of the system. The first rule has a certainty factor of 0.9, while the second rule has a certainty factor of 1.0 (by default).

[7]:
rules = [
    FuzzyRule(
        cf=0.9,
        premise=[
            ("score", "High"),
            ("AND", "ratio", "Goodr"),
            ("AND", "credit", "Goodc"),
        ],
        consequence=[("decision", "Approve")],
    ),
    FuzzyRule(
        premise=[
            ("score", "Low"),
            ("AND", "ratio", "Badr"),
            ("OR", "credit", "Badc"),
        ],
        consequence=[("decision", "Reject")],
    )
]
Facts with certainty factors

In addition, also it is possible to assign certainty factors to the facts. When a certainty factor not is specified by the user, it has a default value or 1.0. In the following code, the variables score, ratio, and credit have certainty factors of 0.9, 1.0, and 0.95 respectively. The conclusion is decision=8.01 with a certainty factor of 0.95.

[8]:
from fuzzy_expert.inference import DecompositionalInference

model = DecompositionalInference(
    and_operator="min",
    or_operator="max",
    implication_operator="Rc",
    composition_operator="max-min",
    production_link="max",
    defuzzification_operator="cog",
)

model(
    variables=variables,
    rules=rules,
    score=(190, 0.9),
    ratio=(0.39, 1.0),
    credit=(1.5, 0.95),
)
[8]:
({'decision': 8.010492631084489}, 0.95)